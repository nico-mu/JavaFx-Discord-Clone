plugins {
    id 'org.fulib.fulibGradle' version '0.4.0'
    id 'org.openjfx.javafxplugin' version '0.0.9'
    id 'io.miret.etienne.sass' version '1.1.1'
    id 'application'
}


mainClassName = 'de.uniks.stp.Launcher'
group = 'de.uniks.stp'
version '1.0.0'

javafx {
    version = "12"
    modules = ['javafx.graphics', 'javafx.fxml', 'javafx.base', 'javafx.controls', 'javafx.media', 'javafx.web']
}

dependencies {
    compile project(':processor')

    compile 'com.jfoenix:jfoenix:9.0.10'
    compile group: 'org.fxmisc.richtext', name: 'richtextfx', version: '0.10.6'
    compile group: 'org.openjfx', name: 'javafx-web', version: '13.0.1'

    implementation group: 'com.konghq', name: 'unirest-java', version: '3.11.09'
    implementation group: 'javax.websocket', name: 'javax.websocket-api', version: '1.1'
    implementation group: 'org.glassfish', name: 'javax.json', version: '1.1'
    implementation group: 'org.glassfish.tyrus', name: 'tyrus-container-grizzly-client', version: '1.15'
    compile group: 'org.hibernate', name: 'hibernate-core', version: '5.4.31.Final'
    compile group: 'com.h2database', name: 'h2', version: '1.4.200'
    compile 'se.michaelthelin.spotify:spotify-web-api-java:6.5.4'

    fulibScenarios group: 'org.fulib', name: 'fulibScenarios', version: '1.7.0'
    implementation group: 'org.fulib', name: 'fulibYaml', version: '1.4.0'
    testImplementation group: 'org.fulib', name: 'fulibTools', version: '1.4.1'
    testImplementation group: 'org.fulib', name: 'fulibTables', version: '1.4.0'
    testImplementation group: 'org.fulib', name: 'fulibMockups', version: '0.3.1'
    testImplementation group: 'org.slf4j', name: 'slf4j-nop', version: '1.7.30'

    testCompile 'org.junit.jupiter:junit-jupiter-api:5.5.1'
    testCompile "org.testfx:testfx-junit5:4.0.16-alpha"
    testRuntime "org.testfx:openjfx-monocle:jdk-12.0.1+2"

    implementation 'org.mockito:mockito-core:2.22.0'
    annotationProcessor project(':processor')

    implementation 'com.google.dagger:dagger:2.37'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.37'
}

test {
    useJUnitPlatform()
    jvmArgs "-Dtestfx.headless=true"
    maxHeapSize = "1024m"
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

jar {
    manifest {
        attributes "Main-Class": "$mainClassName"
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

compileSass {
    // Directory where to output generated CSS:
    outputDir = project.file ("${projectDir}/src/main/resources/de/uniks/stp/style/css/")

    // Source directory containing sass to compile:
    sourceDir = project.file ("${projectDir}/src/main/resources/de/uniks/stp/style/scss/")

    // Set the output style:
    // Possible values are “expanded” and “compressed”, default is “expanded”.
    style = expanded

    // Don’t emit a @charset for CSS with non-ASCII chars (default to emit):
    noCharset ()

    // When an error occurs, do not emit a stylesheet describing it:
    // (Default to emit)
    noErrorCss ()

    // Watch sass files in sourceDir for changes
    //watch ()

    // Source map style:
    //  - file: output source map in a separate file (default)
    //  - embed: embed source map in CSS
    //  - none: do not emit source map.
    sourceMap = none
}

compileJava.dependsOn(compileSass)
